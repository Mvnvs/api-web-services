{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\Downloads\\\\API Project copie\\\\API Project copie\\\\frontend\\\\src\\\\components\\\\EventList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport EventForm from './EventForm';\nimport Event from './Event';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000'); // Assurez-vous que l'URL et le port correspondent à votre serveur WebSocket\n\nconst EventList = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [eventToUpdate, setEventToUpdate] = useState(null);\n  useEffect(() => {\n    // Écouter les événements de création, mise à jour et suppression d'événements\n    socket.on('eventCreated', handleEventCreated);\n    socket.on('eventUpdated', handleEventUpdated);\n    socket.on('eventDeleted', handleEventDeleted);\n\n    // Récupérer la liste des événements au chargement du composant\n    fetchEvents().then(data => {\n      setEvents(data);\n    });\n    return () => {\n      // Nettoyer les écouteurs lors du démontage du composant\n      socket.off('eventCreated', handleEventCreated);\n      socket.off('eventUpdated', handleEventUpdated);\n      socket.off('eventDeleted', handleEventDeleted);\n    };\n  }, []);\n\n  // Fonction pour gérer la création d'un nouvel événement\n  const handleEventCreated = newEvent => {\n    setEvents(prevEvents => [...prevEvents, newEvent]);\n  };\n\n  // Fonction pour gérer la mise à jour d'un événement existant\n  const handleEventUpdated = updatedEvent => {\n    setEvents(prevEvents => prevEvents.map(event => event._id === updatedEvent._id ? updatedEvent : event));\n    setEventToUpdate(null); // Réinitialiser l'événement en cours de mise à jour\n  };\n\n  // Fonction pour gérer la suppression d'un événement\n  const handleEventDeleted = deletedEventId => {\n    setEvents(prevEvents => prevEvents.filter(event => event._id !== deletedEventId));\n  };\n\n  // Fonction pour gérer la soumission du formulaire de création ou mise à jour d'un événement\n  const handleFormSubmit = formData => {\n    if (eventToUpdate) {\n      // Mettre à jour l'événement existant\n      socket.emit('updateEvent', {\n        ...formData,\n        id: eventToUpdate._id\n      });\n    } else {\n      // Créer un nouvel événement\n      socket.emit('createEvent', formData);\n    }\n  };\n\n  // Fonction pour gérer l'annulation de la mise à jour d'un événement\n  const handleCancelUpdate = () => {\n    setEventToUpdate(null); // Réinitialiser l'événement en cours de mise à jour\n  };\n\n  // Fonction pour gérer la mise à jour d'un événement à partir du composant Event\n  const handleUpdateEvent = eventId => {\n    const eventToUpdate = events.find(event => event._id === eventId);\n    setEventToUpdate(eventToUpdate);\n  };\n\n  // Fonction pour gérer la suppression d'un événement à partir du composant Event\n  const handleDeleteEvent = eventId => {\n    socket.emit('deleteEvent', eventId);\n  };\n\n  // Fonction pour gérer l'inscription à un événement à partir du composant Event\n  const handleAttendEvent = eventId => {\n    socket.emit('updateEvent', {\n      id: eventId,\n      isAttending: true\n    });\n  };\n\n  // Fonction pour gérer la désinscription d'un événement à partir du composant Event\n  const handleUnattendEvent = eventId => {\n    socket.emit('updateEvent', {\n      id: eventId,\n      isAttending: false\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(EventForm, {\n      onFormSubmit: handleFormSubmit,\n      onCancelUpdate: handleCancelUpdate,\n      eventToUpdate: eventToUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), events.map(event => /*#__PURE__*/_jsxDEV(Event, {\n      event: event,\n      onUpdate: handleUpdateEvent,\n      onDelete: handleDeleteEvent,\n      onAttend: handleAttendEvent,\n      onUnattend: handleUnattendEvent\n    }, event._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(EventList, \"ivm+7HGByBnBT1O1EFqf9x+GRxI=\");\n_c = EventList;\nexport default EventList;\nvar _c;\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"names":["React","useState","useEffect","EventForm","Event","io","jsxDEV","_jsxDEV","socket","EventList","_s","events","setEvents","eventToUpdate","setEventToUpdate","on","handleEventCreated","handleEventUpdated","handleEventDeleted","fetchEvents","then","data","off","newEvent","prevEvents","updatedEvent","map","event","_id","deletedEventId","filter","handleFormSubmit","formData","emit","id","handleCancelUpdate","handleUpdateEvent","eventId","find","handleDeleteEvent","handleAttendEvent","isAttending","handleUnattendEvent","children","onFormSubmit","onCancelUpdate","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","onDelete","onAttend","onUnattend","_c","$RefreshReg$"],"sources":["C:/Users/emman/Downloads/API Project copie/API Project copie/frontend/src/components/EventList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport EventForm from './EventForm';\nimport Event from './Event';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000'); // Assurez-vous que l'URL et le port correspondent à votre serveur WebSocket\n\nconst EventList = () => {\n  const [events, setEvents] = useState([]);\n  const [eventToUpdate, setEventToUpdate] = useState(null);\n\n  useEffect(() => {\n    // Écouter les événements de création, mise à jour et suppression d'événements\n    socket.on('eventCreated', handleEventCreated);\n    socket.on('eventUpdated', handleEventUpdated);\n    socket.on('eventDeleted', handleEventDeleted);\n\n    // Récupérer la liste des événements au chargement du composant\n    fetchEvents().then(data => {\n      setEvents(data);\n    });\n\n    return () => {\n      // Nettoyer les écouteurs lors du démontage du composant\n      socket.off('eventCreated', handleEventCreated);\n      socket.off('eventUpdated', handleEventUpdated);\n      socket.off('eventDeleted', handleEventDeleted);\n    };\n  }, []);\n\n  // Fonction pour gérer la création d'un nouvel événement\n  const handleEventCreated = (newEvent) => {\n    setEvents(prevEvents => [...prevEvents, newEvent]);\n  };\n\n  // Fonction pour gérer la mise à jour d'un événement existant\n  const handleEventUpdated = (updatedEvent) => {\n    setEvents(prevEvents =>\n      prevEvents.map(event => (event._id === updatedEvent._id ? updatedEvent : event))\n    );\n    setEventToUpdate(null); // Réinitialiser l'événement en cours de mise à jour\n  };\n\n  // Fonction pour gérer la suppression d'un événement\n  const handleEventDeleted = (deletedEventId) => {\n    setEvents(prevEvents =>\n      prevEvents.filter(event => event._id !== deletedEventId)\n    );\n  };\n\n  // Fonction pour gérer la soumission du formulaire de création ou mise à jour d'un événement\n  const handleFormSubmit = (formData) => {\n    if (eventToUpdate) {\n      // Mettre à jour l'événement existant\n      socket.emit('updateEvent', { ...formData, id: eventToUpdate._id });\n    } else {\n      // Créer un nouvel événement\n      socket.emit('createEvent', formData);\n    }\n  };\n\n  // Fonction pour gérer l'annulation de la mise à jour d'un événement\n  const handleCancelUpdate = () => {\n    setEventToUpdate(null); // Réinitialiser l'événement en cours de mise à jour\n  };\n\n  // Fonction pour gérer la mise à jour d'un événement à partir du composant Event\n  const handleUpdateEvent = (eventId) => {\n    const eventToUpdate = events.find(event => event._id === eventId);\n    setEventToUpdate(eventToUpdate);\n  };\n\n  // Fonction pour gérer la suppression d'un événement à partir du composant Event\n  const handleDeleteEvent = (eventId) => {\n    socket.emit('deleteEvent', eventId);\n  };\n\n  // Fonction pour gérer l'inscription à un événement à partir du composant Event\n  const handleAttendEvent = (eventId) => {\n    socket.emit('updateEvent', { id: eventId, isAttending: true });\n  };\n\n  // Fonction pour gérer la désinscription d'un événement à partir du composant Event\n  const handleUnattendEvent = (eventId) => {\n    socket.emit('updateEvent', { id: eventId, isAttending: false });\n  };\n\n  return (\n    <div>\n      {/* Formulaire pour créer ou mettre à jour un événement */}\n      <EventForm\n        onFormSubmit={handleFormSubmit}\n        onCancelUpdate={handleCancelUpdate}\n        eventToUpdate={eventToUpdate}\n      />\n\n      {/* Liste des événements */}\n      {events.map(event => (\n        <Event\n          key={event._id}\n          event={event}\n          onUpdate={handleUpdateEvent}\n          onDelete={handleDeleteEvent}\n          onAttend={handleAttendEvent}\n          onUnattend={handleUnattendEvent}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default EventList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}