{"ast":null,"code":"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst Event = require('../models/Event');\nconst router = express.Router();\nconst authenticateToken = (req, res, next) => {\n  var _req$headers$authoriz;\n  const token = req.query.token || ((_req$headers$authoriz = req.headers['authorization']) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1]);\n  console.log('Token:', token); // Ajoutez ce log pour vérifier le token\n  if (token == null) {\n    console.log('No token provided'); // Log si aucun token n'est fourni\n    return res.sendStatus(401);\n  }\n  jwt.verify(token, process.env.SECRET_KEY, (err, user) => {\n    if (err) {\n      console.log('JWT Verification Error:', err); // Ajoutez ce log pour vérifier les erreurs JWT\n      return res.sendStatus(403);\n    }\n    req.user = user;\n    console.log('Token verified, user:', user); // Log si le token est vérifié\n    next();\n  });\n};\nrouter.use(authenticateToken);\nrouter.use((req, res, next) => {\n  console.log('Inside events router middleware'); // Ajoutez ce log pour vérifier que le middleware de route est appelé\n  next();\n});\nrouter.get('/', async (req, res) => {\n  try {\n    const events = await Event.find().populate('createdBy', 'name').populate('attendees', 'name');\n    res.json(events);\n  } catch (error) {\n    console.log('Error fetching events:', error); // Ajoutez ce log pour vérifier les erreurs de récupération\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nrouter.post('/', async (req, res) => {\n  console.log('Request body:', req.body); // Ajoutez ce log pour vérifier les données reçues\n  const {\n    title,\n    description,\n    date,\n    maxAttendees\n  } = req.body;\n  console.log('Received event data:', {\n    title,\n    description,\n    date\n  }); // Ajoutez ce log pour vérifier les données reçues\n  try {\n    const event = new Event({\n      title,\n      description,\n      date,\n      createdBy: req.user.id,\n      maxAttendees\n    });\n    await event.save();\n    const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n    res.status(201).json(populatedEvent);\n  } catch (error) {\n    console.log('Error adding event:', error); // Ajoutez ce log pour vérifier les erreurs d'ajout\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nrouter.put('/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    title,\n    description,\n    date,\n    maxAttendees\n  } = req.body;\n  try {\n    const event = await Event.findOneAndUpdate({\n      _id: id,\n      createdBy: req.user.id\n    }, {\n      title,\n      description,\n      date,\n      maxAttendees\n    }, {\n      new: true\n    }).populate('createdBy', 'name').populate('attendees', 'name');\n    if (!event) return res.status(404).json({\n      error: 'Event not found or not authorized'\n    });\n    res.json(event);\n  } catch (error) {\n    console.log('Error updating event:', error); // Ajoutez ce log pour vérifier les erreurs de mise à jour\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nrouter.delete('/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const event = await Event.findOneAndDelete({\n      _id: id,\n      createdBy: req.user.id\n    });\n    if (!event) return res.status(404).json({\n      error: 'Event not found or not authorized'\n    });\n    res.status(204).send();\n  } catch (error) {\n    console.log('Error deleting event:', error); // Ajoutez ce log pour vérifier les erreurs de suppression\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nrouter.post('/:id/attend', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const event = await Event.findById(id).populate('createdBy', 'name').populate('attendees', 'name');\n    if (!event) return res.status(404).json({\n      error: 'Event not found'\n    });\n    if (event.attendees.length >= event.maxAttendees) return res.status(400).json({\n      error: 'Event is full'\n    });\n    if (event.attendees.some(attendee => attendee._id.toString() === req.user.id)) return res.status(400).json({\n      error: 'Already registered'\n    });\n    event.attendees.push(req.user.id);\n    await event.save();\n    const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n    res.status(200).json(populatedEvent);\n  } catch (error) {\n    console.log('Error attending event:', error); // Ajoutez ce log pour vérifier les erreurs d'inscription\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nrouter.post('/:id/unattend', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const event = await Event.findById(id).populate('createdBy', 'name').populate('attendees', 'name');\n    if (!event) return res.status(404).json({\n      error: 'Event not found'\n    });\n    if (!event.attendees.some(attendee => attendee._id.toString() === req.user.id)) return res.status(400).json({\n      error: 'Not registered for this event'\n    });\n    event.attendees = event.attendees.filter(attendee => attendee._id.toString() !== req.user.id);\n    await event.save();\n    const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n    res.status(200).json(populatedEvent);\n  } catch (error) {\n    console.log('Error unattending event:', error); // Ajoutez ce log pour vérifier les erreurs de désinscription\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","jwt","Event","router","Router","authenticateToken","req","res","next","_req$headers$authoriz","token","query","headers","split","console","log","sendStatus","verify","process","env","SECRET_KEY","err","user","use","get","events","find","populate","json","error","status","post","body","title","description","date","maxAttendees","event","createdBy","id","save","populatedEvent","findById","_id","put","params","findOneAndUpdate","new","delete","findOneAndDelete","send","attendees","length","some","attendee","toString","push","filter","module","exports"],"sources":["C:/Users/emman/Downloads/API Project copie/API Project copie/frontend/src/components/Event.js"],"sourcesContent":["const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst Event = require('../models/Event');\nconst router = express.Router();\n\nconst authenticateToken = (req, res, next) => {\n    const token = req.query.token || req.headers['authorization']?.split(' ')[1];\n    console.log('Token:', token); // Ajoutez ce log pour vérifier le token\n    if (token == null) {\n        console.log('No token provided'); // Log si aucun token n'est fourni\n        return res.sendStatus(401);\n    }\n\n    jwt.verify(token, process.env.SECRET_KEY, (err, user) => {\n        if (err) {\n            console.log('JWT Verification Error:', err); // Ajoutez ce log pour vérifier les erreurs JWT\n            return res.sendStatus(403);\n        }\n        req.user = user;\n        console.log('Token verified, user:', user); // Log si le token est vérifié\n        next();\n    });\n};\n\nrouter.use(authenticateToken);\n\nrouter.use((req, res, next) => {\n    console.log('Inside events router middleware'); // Ajoutez ce log pour vérifier que le middleware de route est appelé\n    next();\n});\n\nrouter.get('/', async (req, res) => {\n    try {\n        const events = await Event.find().populate('createdBy', 'name').populate('attendees', 'name');\n        res.json(events);\n    } catch (error) {\n        console.log('Error fetching events:', error); // Ajoutez ce log pour vérifier les erreurs de récupération\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nrouter.post('/', async (req, res) => {\n    console.log('Request body:', req.body); // Ajoutez ce log pour vérifier les données reçues\n    const { title, description, date, maxAttendees } = req.body;\n    console.log('Received event data:', { title, description, date }); // Ajoutez ce log pour vérifier les données reçues\n    try {\n        const event = new Event({ title, description, date, createdBy: req.user.id, maxAttendees });\n        await event.save();\n        const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n        res.status(201).json(populatedEvent);\n    } catch (error) {\n        console.log('Error adding event:', error); // Ajoutez ce log pour vérifier les erreurs d'ajout\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nrouter.put('/:id', async (req, res) => {\n    const { id } = req.params;\n    const { title, description, date, maxAttendees } = req.body;\n    try {\n        const event = await Event.findOneAndUpdate(\n            { _id: id, createdBy: req.user.id },\n            { title, description, date, maxAttendees },\n            { new: true }\n        ).populate('createdBy', 'name').populate('attendees', 'name');\n        if (!event) return res.status(404).json({ error: 'Event not found or not authorized' });\n        res.json(event);\n    } catch (error) {\n        console.log('Error updating event:', error); // Ajoutez ce log pour vérifier les erreurs de mise à jour\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nrouter.delete('/:id', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const event = await Event.findOneAndDelete({ _id: id, createdBy: req.user.id });\n        if (!event) return res.status(404).json({ error: 'Event not found or not authorized' });\n        res.status(204).send();\n    } catch (error) {\n        console.log('Error deleting event:', error); // Ajoutez ce log pour vérifier les erreurs de suppression\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nrouter.post('/:id/attend', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const event = await Event.findById(id).populate('createdBy', 'name').populate('attendees', 'name');\n        if (!event) return res.status(404).json({ error: 'Event not found' });\n        if (event.attendees.length >= event.maxAttendees) return res.status(400).json({ error: 'Event is full' });\n        if (event.attendees.some(attendee => attendee._id.toString() === req.user.id)) return res.status(400).json({ error: 'Already registered' });\n        event.attendees.push(req.user.id);\n        await event.save();\n        const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n        res.status(200).json(populatedEvent);\n    } catch (error) {\n        console.log('Error attending event:', error); // Ajoutez ce log pour vérifier les erreurs d'inscription\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nrouter.post('/:id/unattend', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const event = await Event.findById(id).populate('createdBy', 'name').populate('attendees', 'name');\n        if (!event) return res.status(404).json({ error: 'Event not found' });\n        if (!event.attendees.some(attendee => attendee._id.toString() === req.user.id)) return res.status(400).json({ error: 'Not registered for this event' });\n        event.attendees = event.attendees.filter(attendee => attendee._id.toString() !== req.user.id);\n        await event.save();\n        const populatedEvent = await Event.findById(event._id).populate('createdBy', 'name').populate('attendees', 'name');\n        res.status(200).json(populatedEvent);\n    } catch (error) {\n        console.log('Error unattending event:', error); // Ajoutez ce log pour vérifier les erreurs de désinscription\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}