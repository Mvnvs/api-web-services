{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\Downloads\\\\API Project copie\\\\API Project copie\\\\frontend\\\\src\\\\components\\\\EventList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchEvents, deleteEvent, attendEvent, unattendEvent, createEvent } from '../api';\nimport Event from './Event';\nimport EventForm from './EventForm';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001'); // Assurez-vous d'utiliser le bon port et chemin pour votre serveur Socket.IO\n\nconst EventList = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    // Fonction pour récupérer les événements depuis le serveur\n    const getEvents = async () => {\n      const events = await fetchEvents();\n      setEvents(events);\n    };\n\n    // Exécuter la fonction au chargement du composant\n    getEvents();\n\n    // Écouter l'événement 'eventUpdated' émis par le serveur pour mettre à jour les événements\n    socket.on('eventUpdated', updatedEvent => {\n      setEvents(prevEvents => {\n        // Rechercher l'événement à mettre à jour dans la liste actuelle\n        const updatedEvents = prevEvents.map(event => {\n          if (event._id === updatedEvent._id) {\n            return updatedEvent; // Retourner l'événement mis à jour\n          }\n          return event; // Retourner l'événement sans modification\n        });\n        return updatedEvents; // Retourner la nouvelle liste d'événements mise à jour\n      });\n    });\n\n    // Nettoyer l'écouteur d'événements lors du démontage du composant\n    return () => {\n      socket.off('eventUpdated');\n    };\n  }, []); // Exécuter une seule fois lors du montage du composant\n\n  const handleDelete = async id => {\n    await deleteEvent(id);\n    setEvents(events.filter(event => event._id !== id));\n  };\n  const handleAttend = async id => {\n    const updatedEvent = await attendEvent(id);\n    setEvents(events.map(event => event._id === id ? updatedEvent : event));\n  };\n  const handleUnattend = async id => {\n    const updatedEvent = await unattendEvent(id);\n    setEvents(events.map(event => event._id === id ? updatedEvent : event));\n  };\n  const handleEventCreated = async newEvent => {\n    try {\n      const createdEvent = await createEvent(newEvent);\n      socket.emit('createEvent', createdEvent); // Émettre un événement de création au serveur via Socket.IO\n      setEvents([...events, createdEvent]); // Ajouter le nouvel événement à la liste existante\n    } catch (error) {\n      console.error('Error creating event:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(EventForm, {\n      onEventCreated: handleEventCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), events.map(event => /*#__PURE__*/_jsxDEV(Event, {\n      event: event,\n      onDelete: handleDelete,\n      onAttend: handleAttend,\n      onUnattend: handleUnattend\n    }, event._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(EventList, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = EventList;\nexport default EventList;\nvar _c;\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"names":["React","useState","useEffect","fetchEvents","deleteEvent","attendEvent","unattendEvent","createEvent","Event","EventForm","io","jsxDEV","_jsxDEV","socket","EventList","_s","events","setEvents","getEvents","on","updatedEvent","prevEvents","updatedEvents","map","event","_id","off","handleDelete","id","filter","handleAttend","handleUnattend","handleEventCreated","newEvent","createdEvent","emit","error","console","children","onEventCreated","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onAttend","onUnattend","_c","$RefreshReg$"],"sources":["C:/Users/emman/Downloads/API Project copie/API Project copie/frontend/src/components/EventList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchEvents, deleteEvent, attendEvent, unattendEvent, createEvent } from '../api';\nimport Event from './Event';\nimport EventForm from './EventForm';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3001'); // Assurez-vous d'utiliser le bon port et chemin pour votre serveur Socket.IO\n\nconst EventList = () => {\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    // Fonction pour récupérer les événements depuis le serveur\n    const getEvents = async () => {\n      const events = await fetchEvents();\n      setEvents(events);\n    };\n\n    // Exécuter la fonction au chargement du composant\n    getEvents();\n\n    // Écouter l'événement 'eventUpdated' émis par le serveur pour mettre à jour les événements\n    socket.on('eventUpdated', (updatedEvent) => {\n      setEvents(prevEvents => {\n        // Rechercher l'événement à mettre à jour dans la liste actuelle\n        const updatedEvents = prevEvents.map(event => {\n          if (event._id === updatedEvent._id) {\n            return updatedEvent; // Retourner l'événement mis à jour\n          }\n          return event; // Retourner l'événement sans modification\n        });\n        return updatedEvents; // Retourner la nouvelle liste d'événements mise à jour\n      });\n    });\n\n    // Nettoyer l'écouteur d'événements lors du démontage du composant\n    return () => {\n      socket.off('eventUpdated');\n    };\n  }, []); // Exécuter une seule fois lors du montage du composant\n\n  const handleDelete = async (id) => {\n    await deleteEvent(id);\n    setEvents(events.filter(event => event._id !== id));\n  };\n\n  const handleAttend = async (id) => {\n    const updatedEvent = await attendEvent(id);\n    setEvents(events.map(event => (event._id === id ? updatedEvent : event)));\n  };\n\n  const handleUnattend = async (id) => {\n    const updatedEvent = await unattendEvent(id);\n    setEvents(events.map(event => (event._id === id ? updatedEvent : event)));\n  };\n\n  const handleEventCreated = async (newEvent) => {\n    try {\n      const createdEvent = await createEvent(newEvent);\n      socket.emit('createEvent', createdEvent); // Émettre un événement de création au serveur via Socket.IO\n      setEvents([...events, createdEvent]); // Ajouter le nouvel événement à la liste existante\n    } catch (error) {\n      console.error('Error creating event:', error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Formulaire pour créer ou mettre à jour des événements */}\n      <EventForm onEventCreated={handleEventCreated} />\n\n      {/* Afficher la liste des événements */}\n      {events.map(event => (\n        <Event\n          key={event._id}\n          event={event}\n          onDelete={handleDelete}\n          onAttend={handleAttend}\n          onUnattend={handleUnattend}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default EventList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}